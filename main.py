import asyncio
import nest_asyncio
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from gpt import ask_gpt

nest_asyncio.apply()

BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

GET_BIRTHDATA = 1
user_data = {}

main_menu_keyboard = [
    ["üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –∑–≤—ë–∑–¥"],
    ["üåü –ú–æ–π –ª–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑", "üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è –∏ —Å–∏–ª–∞ –∏–º–µ–Ω–∏"],
    ["üß† –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–æ–º –∏–ª–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º"],
    ["ü™ê –ö–∞—Ä–º–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –∏ –∑–∞–¥–∞—á–∏ –¥—É—à–∏"],
    ["‚ù§Ô∏è –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏ –∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è —Å–≤—è–∑—å"],
    ["üíå –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–æ–±—Ä–æ–º —Å –¥—Ä—É–≥–æ–º"],
    ["üìö –ß—Ç–æ —ç—Ç–æ –∑–∞ –º–µ—Å—Ç–æ –∏ –∫–∞–∫ –æ–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?"]
]
markup = ReplyKeyboardMarkup(main_menu_keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ú® –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ¬´–¢—ã –Ω–µ –æ–¥–∏–Ω¬ª ‚Äî –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –≥–¥–µ —Ç–µ–±—è —Å–ª—ã—à–∞—Ç.

"
        "–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Ç–æ—á–Ω–æ –ø–æ–Ω—è—Ç—å —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø–æ–º–æ—á—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å:

"
        "üîπ –ò–º—è
"
        "üîπ –î–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–¥–¥.–º–º.–≥–≥–≥–≥)
"
        "üîπ –í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –∑–Ω–∞–µ—à—å)
"
        "üîπ –ì–æ—Ä–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è

"
        "üìå –ü—Ä–∏–º–µ—Ä: –ê–Ω–Ω–∞, 25.10.1993, 14:20, –ö–∞–∑–∞–Ω—å

"
        "‚ö†Ô∏è –í–≤–æ–¥–∏ –≤—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏. –≠—Ç–æ –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Ç–≤–æ–µ–π –∫–∞—Ä—Ç–æ–π —Å—É–¥—å–±—ã.

"
        "üîê –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ç—Ä–æ–≥–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –∏ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.",
    )
    return GET_BIRTHDATA

async def collect_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    user_id = update.effective_user.id
    user_data[user_id] = user_input

    await update.message.reply_text(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ! –ú—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:

{user_input}

"
        "–ù–∞–∂–º–∏ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ üëá",
        reply_markup=markup
    )
    return ConversationHandler.END

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    if "–ø–æ–¥–∞—Ä–æ–∫" in message:
        await update.message.reply_text("üéÅ –°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–µ –æ–¥–∏–Ω. –í—Å—ë –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ üåü")
    elif "–ø—Ä–æ–≥–Ω–æ–∑" in message:
        await update.message.reply_text("üîÆ –ù–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≥–Ω–æ–∑? –°–µ–≥–æ–¥–Ω—è, –Ω–µ–¥–µ–ª—è, –º–µ—Å—è—Ü?")
    elif "–∞—Å—Ç—Ä–æ–ª–æ–≥" in message:
        await update.message.reply_text("üß† –ù–∞–ø–∏—à–∏ /consult –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
    elif "–Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è" in message:
        await update.message.reply_text("üî¢ –ù–∞–ø–∏—à–∏ /number –∏ –º—ã –≤—Å—ë —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º.")
    elif "–∫–∞—Ä–º–∏—á–µ—Å–∫–∞—è" in message:
        await update.message.reply_text("ü™ê –ù–∞–ø–∏—à–∏ /karma –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á –¥—É—à–∏.")
    elif "—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å" in message:
        await update.message.reply_text("‚ù§Ô∏è –ù–∞–ø–∏—à–∏ /match –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.")
    elif "–ø–æ–¥–µ–ª–∏—Ç—å—Å—è" in message:
        await update.message.reply_text("üíå –ù–∞–ø–∏—à–∏ /share —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–±—Ä–æ –¥—Ä—É–≥—É.")
    elif "—á—Ç–æ —ç—Ç–æ" in message:
        await update.message.reply_text("üìö –≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞—Å—Ç—Ä–æ–ª–æ–≥–∏–µ–π, –ø—Å–∏—Ö–æ–ª–æ–≥–∏–µ–π –∏ —ç–Ω–µ—Ä–≥–∏–µ–π.")
    else:
        await update.message.reply_text("‚ùì –ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é.")

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={GET_BIRTHDATA: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_data)]},
        fallbacks=[]
    )

    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())